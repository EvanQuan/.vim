" ============================================================================
" File:       _vsvimrc
" Maintainer: https://github.com/EvanQuan/qvim/
" Version:    0.2.0
"
" Vim configuration for VsVim Visual Studio extension.
"
" - Avoid expression mappings.
" - Avoid innoremap
" - Avoid window creating mappings (ex. NERDTree)
"
"     :help qvim
"
" Press \ or za to toggle category folding/unfolding.
" ============================================================================
" Initial Setup {{{

" The first steps necessary to set up everything.

" Version
" Displayed with lightline-buffer.

" Path {{{

" Operating system determines the vim home directory.
" NOTE: As of vimrc 2.0.0, with vim-plug as a manager, operating system
" difference problem can be bypassed with a uniform plugin runtime path.
"
let $MYVIMHOME = '~/.vim'

" $MYVIMRC already exists as a path variable, but defaults to ~/.vimrc
" if it exists. To prevent this, it is redefined to ensure that it links
" to this one.
"
let $MYVIMRC = $MYVIMHOME . '/vimrc'
let $MYGITPLUGINS = $MYVIMHOME . '/bundle'
let $MYDOC = $MYVIMHOME . '/doc'
let $MYQVIMDOC = $MYDOC . '/qvim.txt'
let $MYVERSION = $MYVIMHOME . '/version'
let $MYTEMPLATES = $MYVERSION . '/templates'
let $MYSETTINGS = $MYVIMHOME . '/settings.vim'
let $MYSETTINGSTEMPLATE = $MYTEMPLATES . '/settings.vim'
let $MYNOTES = $MYVIMHOME . '/notes.txt'
let $MYGVIMRC = $MYVIMHOME . '/gvimrc'
let $MYWINDOWSVIMRC = '~/_vimrc'
let $MYWINDOWSVIMRCTEMPLATE = $MYTEMPLATES . '/_vimrc'

" }}}
" Settings {{{

" Set statusline to nothing for later commands that increment onto statusline.
" This lets the refresh vimrc command to work without overloading the
" statusline.
"
set statusline=

" }}}

" }}}
" Languages {{{

" Default {{{

" 4-space soft tabs
"
" Number of spaces that a <Tab> in the file counts for.
" Default 8
"
set tabstop=4

" Number of spaces to use for each step of (auto)indent.
"
set shiftwidth=4

" Number of spaces that a <Tab> conunts for while performing editing
" operations.
"
set softtabstop=4

" In Insert mode: use the appropraiate number of spaces to insert a <Tab>.
"
set expandtab " sets tabs to spaces

" Copy indent from current line when starting a new line
"
set autoindent

" }}}

" }}}
" Mappings {{{

" Easier commands
nnoremap <Return> :

" Leader Key {{{

" This key is used in combination with other keys to perform many customizable
" commands
" default leader is \
"
let mapleader = " "

" }}}
" Editing {{{

" Recursive mapping due to vim-speeddating plugin
" Incrementing and decrementing numbers
"
map + <C-a>
map - <C-x>

" Sequential increment and decrement
map g+ g<C-a>
map g- g<C-x>

" Change {{{

" Replaces the word under cursor with whatever you want
"   Similar to ciw
" Repeat with . replaces FOLLOWING occurrences of that word
"
nnoremap c* /\<<C-R>=expand('<cword>')<Return>\>\C<Return>``cgn

" Repeat with . replaces PREVIOUS occurrences of that word
"
nnoremap c# ?\<<C-R>=expand('<cword>')<Return>\>\C<Return>``cgN

" Around/In Line
"
nnoremap cal S
nnoremap cil S

" Around/In Double Quotes
"
nnoremap caq ca"
nnoremap ciq ci"

" Around/In Single Quotes
"
nnoremap caQ ca'
nnoremap ciQ ci'

" Until end of Line
"
nnoremap cL c$

" From start of Line
"
nnoremap cH c^

" }}}
" Delete {{{

" Similar with delete diw
"
nnoremap d* /\<<C-r>=expand('<cword>')<Return>\>\C<Return>``dgn
nnoremap d# ?\<<C-r>=expand('<cword>')<Return>\>\C<Return>``dg

" Around/In Line
"
nnoremap dal dd
" TODO: This pauses for some reason, source not found. Mapped here prevents
" delay. Perhaps source is plugin. Grepping shows no results.
nnoremap dd dd
nnoremap dil S<Esc>

" Around/In Double Quotes
"
nnoremap daq da"
nnoremap diq di"

" Around/In Single Quotes
"
nnoremap daQ da'
nnoremap diQ di'

" }}}
" Spelling {{{

" Suggest spellcheck fixes for current word
"
noremap <Leader>ss z=

" }}}
" Substitute {{{

" Globally in File
"
noremap <Leader>sgf :%s//g<Left><Left>

" First in File
"
noremap <Leader>sff :%s//<Left>

" Globally in Line
"
noremap <Leader>sgl :s//g<Left><Left>

" In Line
"
noremap <Leader>sfl :s//<Left>

" }}}
" Paste {{{

" Similar to yanking

" Leader prefix added to prevent input lag for normal 'p'
" Current disabled, as special paste commands requires leader prefix.
" nnoremap pp p

" System Clipboard
"
noremap <Leader>pc "+p

" Around/In Word
"
nnoremap <Leader>paw "_dawP
nnoremap <Leader>piw "_diwP

" Around/In Braces
"
nnoremap <Leader>pi{ "_di{P
nnoremap <Leader>pi} "_di}P
nnoremap <Leader>piB "_di{P
nnoremap <Leader>piB "_di}P

" Around/In Brackets
"
nnoremap <Leader>pi[ "_di[P
nnoremap <Leader>pi] "_di]P

" Around/In Double Quotes
"
nnoremap <Leader>pa" "_da"P
nnoremap <Leader>paq "_da"P
nnoremap <Leader>pi" "_di"P
nnoremap <Leader>piq "_di"P

" Around/In Single Quotes
"
nnoremap <Leader>pa' "_da'P
nnoremap <Leader>paQ "_da'P
nnoremap <Leader>pi' "_di'P
nnoremap <Leader>piQ "_di"P

" Parens
"
nnoremap <Leader>pi( "_di(P
nnoremap <Leader>pi) "_di)P
nnoremap <Leader>pib "_di(P
nnoremap <Leader>pib "_di)P

" Greater/less than
nnoremap <Leader>pi< "_di<P
nnoremap <Leader>pi> "_di>P

" Tag
"
nnoremap <Leader>pit "_ditP

" Line
"
nnoremap <Leader>pil "_ddP

" }}}
" Underline {{{

nnoremap <Leader>u- yypVr-j
nnoremap <Leader>u= yypVr=j

" }}}
" Visual {{{

" Around Line
" Selects current line, but in Visual mode, not Visual-Line mode
"
vnoremap al <Esc>0v$

" In Line
" Selects current line, except for end-of-line character, in Visual mode
"
vnoremap il <Esc>0v$h

" Around/In Double Quotes
"
vnoremap aq a"
vnoremap iq i"

" Around/In Single Quotes
"
vnoremap aQ a'
vnoremap iQ i'

" Make Backspace/Delete work as expected in visual modes by deleting the
" selected text
"
vnoremap <BS> x

" Select all (the entire file).
"
vnoremap aa VGo1G

" }}}
" Yank {{{

" System clipboard
"
noremap <Leader>y "+y

" Around/In Line
" Yanks whole line except for end-of-line character
" Similar to yy
"
nnoremap yal Vy
nnoremap yil $v^y

"Around/In Double Quotes
"
nnoremap yaq ya"
nnoremap yiq yi"

"Around/In Single Quotes
"
nnoremap yaQ ya'
nnoremap yiQ yi'

" Until end of Line
"
nnoremap yL y$

" From start of Line
"
nnoremap yH y^

" }}}

" }}}
" Files {{{

" Toggle between the last two files opened in current session.
"
nnoremap <Leader>tf <C-^>

" Edit vimrc
"
nnoremap <silent> <Leader>ev :edit $MYVIMRC<Return>
nnoremap <silent> <Leader>hev :split $MYVIMRC<Return>
nnoremap <silent> <Leader>vev :vsplit $MYVIMRC<Return>

" Edit Windows _vimrc
"
nnoremap <silent> <Leader>ew :edit $MYWINDOWSVIMRC<Return>
nnoremap <silent> <Leader>hew :split $MYWINDOWSVIMRC<Return>
nnoremap <silent> <Leader>vew :vsplit $MYWINDOWSVIMRC<Return>

" Edit Windows _vimrc template
"
nnoremap <silent> <Leader>eW :edit $MYWINDOWSVIMRCTEMPLATE<Return>
nnoremap <silent> <Leader>heW :split $MYWINDOWSVIMRCTEMPLATE<Return>
nnoremap <silent> <Leader>veW :vsplit $MYWINDOWSVIMRCTEMPLATE<Return>

" Edit qvim.txt help documentation
"
nnoremap <silent> <Leader>eq :edit $MYQVIMDOC<Return>
nnoremap <silent> <Leader>heq :split $MYQVIMDOC<Return>
nnoremap <silent> <Leader>veq :vsplit $MYQVIMDOC<Return>

" Edit gvimrc
"
nnoremap <silent> <Leader>eg :edit $MYGVIMRC<Return>
nnoremap <silent> <Leader>heg :split $MYGVIMRC<Return>
nnoremap <silent> <Leader>veg :vsplit $MYGVIMRC<Return>

" Reload vimrc
"
nnoremap <silent> <Leader>Rv :source $MYVIMRC<Return>

" Open settings.vim
"
nnoremap <silent> <Leader>es :edit $MYSETTINGS<Return>
nnoremap <silent> <Leader>hes :split $MYSETTINGS<Return>
nnoremap <silent> <Leader>ves :vsplit $MYSETTINGS<Return>

" Open settings.vim template
"
nnoremap <silent> <Leader>eS :edit $MYSETTINGSTEMPLATE<Return>
nnoremap <silent> <Leader>heS :split $MYSETTINGSTEMPLATE<Return>
nnoremap <silent> <Leader>veS :vsplit $MYSETTINGSTEMPLATE<Return>

" Open notes.txt
"
nnoremap <silent> <Leader>en :edit $MYNOTES<Return>
nnoremap <silent> <Leader>hen :split $MYNOTES<Return>
nnoremap <silent> <Leader>ven :vsplit $MYNOTES<Return>

" .tmux.conf
"
nnoremap <silent> <Leader>et :edit ~/.tmux.conf<Return>
nnoremap <silent> <Leader>het :split ~/.tmux.conf<Return>
nnoremap <silent> <Leader>vet :vsplit ~/.tmux.conf<Return>

" .bashrc
"
nnoremap <silent> <Leader>eb :edit ~/.bashrc<Return>
nnoremap <silent> <Leader>heb :split ~/.bashrc<Return>
nnoremap <silent> <Leader>veb :vsplit ~/.bashrc<Return>

" README.md
"
nnoremap <Leader>eR :edit README.md<Return>
nnoremap <Leader>heR :split README.md<Return>
nnoremap <Leader>veR :vsplit README.md<Return>

" run.sh
"
nnoremap <Leader>er :edit run.sh<Return>
nnoremap <Leader>her :split run.sh<Return>
nnoremap <Leader>ver :vsplit run.sh<Return>

" Makefile
"
nnoremap <Leader>em :edit makefile<Return>
nnoremap <Leader>hem :split makefile<Return>
nnoremap <Leader>vem :vsplit makefile<Return>

" input.txt
"
nnoremap <silent> <Leader>ei :edit input.txt<Return>
nnoremap <silent> <Leader>hei :split input.txt<Return>
nnoremap <silent> <Leader>vei :vsplit input.txt<Return>

" output.txt
"
nnoremap <silent> <Leader>eo :edit output.txt<Return>
nnoremap <silent> <Leader>heo :split output.txt<Return>
nnoremap <silent> <Leader>veo :vsplit output.txt<Return>

" }}}
" Folding {{{

" Toggle open/close folds
" Since default leader key is remapped, use it for folding
" Enter doesn't do anything in normal mode. Use it for folding.
"
nnoremap \ za

" }}}
" Formatting {{{

" Repeat last macro.
" NOTE: Overwrites default for enter Ex-mode.
" Use ":" for Ex mode instead (Command mode).
"
noremap Q @@

" }}}
" Movement {{{

" Windows {{{

" Directional movement
"
nnoremap <Leader>wh <C-w>h
nnoremap <Leader>wj <C-w>j
nnoremap <Leader>wk <C-w>k
nnoremap <Leader>wl <C-w>l

" Go to next window
"
nnoremap ]w <C-w>w

" Go to previous window
"
nnoremap [w <C-w>W

" Quit window
"
nnoremap <Leader>qw :x<Return>
nnoremap <Leader>wq :x<Return>

" Split
nnoremap <Leader>ws <C-w>s
nnoremap <Leader>wv <C-w>v

" }}}
" Tabs {{{

" Open new tab
nnoremap <Leader>ot :tabe<Return>

" Go to tab :by number
"
nnoremap <Leader>T1 1gt
nnoremap <Leader>T2 2gt
nnoremap <Leader>T3 3gt
nnoremap <Leader>T4 4gt
nnoremap <Leader>T5 5gt
nnoremap <Leader>T6 6gt
nnoremap <Leader>T7 7gt
nnoremap <Leader>T8 8gt
nnoremap <Leader>T9 9gt
nnoremap <Leader>Tf :tabfirst<Return>
nnoremap <Leader>Tl :tablast<Return>

" Go to next tab
" Same as gt
"
nnoremap ]t :tabnext<Return>

" Go to previous tab
" Same as gT
"
nnoremap [t :tabprevious<Return>

" Quit tab
"
nnoremap <Leader>qt tabclose

" }}}
" Session {{{

" }}}
" Within Window {{{

" Move up/down by visual lines instead of by 'literal' lines
" Good for when there is soft wrapping.
" If using count to move up and down, revert back to 'logical' lines so that
" wrapped lines only count as one. Mark the previous location so it can be
" returned to with CTRL-O
"
" nnoremap <expr> j (v:count > 1 ? "m'" . v:count . 'j' : 'gj')
" nnoremap <expr> k (v:count > 1 ? "m'" . v:count . 'k' : 'gk')
nnoremap j gj
nnoremap k gk

" Non-modifier approach to moving up and down half a window. Since j and
" k already use gj/gk, we might as well make use of these bindings.
"
noremap gj <C-d>
noremap gk <C-u>

" Allow backspacing over autoindent, line breaks, and start of insert action
set backspace=indent,eol,start

" Search for TODO comments
"
nnoremap ]T /TODO<Return>
nnoremap [T ?TODO<Return>

" }}}

" }}}
" Indentation {{{

" Indent with tab and unindenting with shift-tab in all modes
"
nnoremap <Tab> >>_
nnoremap <S-Tab> <<
inoremap <S-Tab> <C-D>
vnoremap > >gv
vnoremap < <gv
vnoremap <S-Tab> <gv
vnoremap <Tab> >gv

" Replace all sequences of white-space containing a <Tab> with new strings of
" white-space using the new tabstop value given. If you do not specify a new
" tabstop size or it is zero, Vim uses the current value of 'tabstop'.
"
nnoremap <Leader>Rt :retab<Return>

" }}}
" Searching {{{

" Enable "very magic" search mode
" All characters except 0-9, a-z, A-Z, an _ have special meaning
" Allow for searching with regex
" Type ":help \v" for more information
"
nnoremap / /\v
vnoremap / /\v

" Going to next/previous search moves cursor to the centre of the screen.
"
noremap n nzz
noremap N Nzz

" clear highlighting
"
" Cannot directy nnoremap <Esc>. Workaround.
nnoremap <Leader><space> :nohlsearch<Return>
" Source: https://stackoverflow.com/questions/11940801/mapping-esc-in-vimrc-causes-bizarre-arrow-behaviour

" }}}

" }}}
" Performance {{{

" Maximum column inn which to search for syntax items. In long lines the text
" after this column is not highlighted and following lines may not be
" highlighted correctly, because the syntax state is cleared.
" This helps avoid very slow redrawing for an XML file that is one long line.
" Set to 0 to remove the limit.
"
" Currently disabled as its effect is minimal and most files don't have text
" that extends laterally that far anyways.
"
" Default 3000
"
" set synmaxcol=128

" }}}
" Plugins {{{

" vim-closetag {{{
" Repository: https://github.com/alvan/vim-closetag

" filenames like *.xml, *.html, *.xhtml, ...
" Then after you press <kbd>&gt;</kbd> in these files, this plugin will try to close the current tag.
"
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

" filenames like *.xml, *.xhtml, ...
" This will make the list of non closing tags self closing in the specified files.
"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" integer value [0|1]
" This will make the list of non closing tags case sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
"
let g:closetag_emptyTags_caseSensitive = 1

" Shortcut for closing tags, default is '>'
"
let g:closetag_shortcut = '>'

" Add > at current position without closing the current tag, default is ''
"
let g:closetag_close_shortcut = '<Leader>>'
" }}}
" vim-easy-align {{{
" Repository: https://github.com/junegunn/vim-easy-align

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" }}}
" }}}
" User Interface {{{

" Cursor {{{
" hi Cursor         guifg=#F8F8F8           guibg=#A7A7A7
" hi CursorIM       guifg=#F8F8F8           guibg=#002947"#5F5A60
" Scrolling {{{

" Determines the number of context lines you want to see above and below the
" cursor. Helpful for scrolling.
"
set scrolloff=5

" }}}
" Visibility {{{

set cursorline

" }}}

" }}}
" Status Line {{{

" Status line displays the current mode, file name, file status, ruler etc.
" Current unnecessary with lightline, but is useful when lightline is
" disabled.
"
set laststatus=2

" Show command
" Displays in bottom-right what keys have already been pressed for the current
" command
"
set showcmd

" }}}

" }}}
" Utility {{{

" Editing {{{

" Use one space, not two, after punctuation.
"
set nojoinspaces

" Square up visual selection
"
set virtualedit=block

" }}}
" File {{{

" }}}
" History {{{

" Keep 1000 lines of command line history
"
set history=1000

" }}}
" Searching {{{

" highlight matches
"
set hlsearch

" Search as characters are entered
"
set incsearch

" Ignore case when searching by default...
"
set ignorecase

" ...unless case is specified, in which case is not ignored
"
set smartcase

" }}}

" }}}
