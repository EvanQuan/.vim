*qvim.txt*      For Vim version 8.1                Last change: 2018 December 18

                                      _                                        ~
                                     (_)                                       ~
                           __ ___   ___ _ __ ___                               ~
                          / _` \ \ / / | '_ ` _ \                              ~
                         | (_| |\ V /| | | | | | |                             ~
                          \__, | \_/ |_|_| |_| |_|                             ~
                             | |                                               ~
                             |_|  Begone Foul Emacs!                           ~

                             Reference Manual                                  ~

==============================================================================
CONTENTS                                                         *qvim-contents*

    1. Intro....................................|qvim-intro|
    2. History..................................|qvim-history|
        2.1 Vim.................................|qvim-history-vim|
        2.2 Configuration.......................|qvim-history-configuration|
    3. Configuration Philosophy.................|qvim-philosophy|
        3.1 Minimalism..........................|qvim-minimalism|
        3.2 Dependencies........................|qvim-dependencies|
        3.3 Mappings............................|qvim-mappings|
            3.3.1 Defaults......................|qvim-defaults|
            3.3.2 Redundancy....................|qvim-redundancy|
            3.3.3 Editing Style.................|qvim-editing-style|
    4. Settings.................................|settings.vim|

==============================================================================
1. Intro                                                            *qvim-intro*

You are using Evan Quan's Vim configuration files. The most updated version of
the files can be found at:

        https://github.com/EvanQuan/qvim/

The following documentation describes some history behind this configuration
as well as the thought process behind designing it.

==============================================================================
2. History                                                        *qvim-history*

------------------------------------------------------------------------------
2.1 Vim                                                       *qvim-history-vim*

------------------------------------------------------------------------------
2.2 Configuration                                   *qvim-history-configuration*

------------------------------------------------------------------------------
2.3 Use                                                           *qvim-why-use*

==============================================================================
3. Configuration Philosophy                                    *qvim-philosophy*

There are a few main principles I try to abide to when configuring Vim to my
liking: account for lacking dependencies, minimize conflicts with default key
mappings, make use of redundant default key mappings, and stay consistent with
Vim's key mapping style.

------------------------------------------------------------------------------
3.1 Minimalism                                                 *qvim-minimalism*

My take is to be minimalistic while I can, but prioritize functionality if
possible. This means I'm happy to have as many plugins and customizations as
I can that can help improve my workflow without worrying about going overboard
or deviating too far from vanilla Vim. However, where multiple options exist
that purport to solve the same problem or provide the same functionality,
I will usually favor the simpler solution. Here are a couple of examples to
demonstrate the point.

Status line~

A status line plugin was pretty important for me to consistently
display important information better than Vim's native 'statusline' setting.
With Powerline (https://github.com/powerline/powerline) and Airline
(https://github.com/vim-airline/vim-airline) as possible options, I opted
for |lightline|, which provides a more minimal and configurable alternative.

Find and Til~

Another example is introducing a plugin to improve the usability of the |f| or
|t| commands. Easymotion (https://github.com/easymotion/vim-easymotion) is
a fairly popular and powerful plugin that extends the funcionalities of these
commands, as well as for substitutions. However, I found that it was a fairly
heavy-weight plugin for in that it in that it did quite a lot for such as
simple command. It was also very visually fairly disruptive, altering the
colours of the whole screen and momentarily changing characters from one to
another. I decided to go with a much simplier and subtle plugin called
|quick-scope|, which only added a visual indicator of characters to jump to.

------------------------------------------------------------------------------
3.2 Dependencies                                             *qvim-dependencies*

With Vim's vast ecosystem of plugins, I have a lot ot choose from. Many
plugins that offer a lot of functionality require external dependencies,
especially for those that provide IDE-like features. However, as I work on
various machines, not all of them are able to provide those dependencies. As
a result, I have made a conscious effort to accomodate for various levels of
dependency support, either by disabling unsupported features, or providing
alternatives as a workaround.

Minimize dependencies where possible~

This is mainly motived to ease the installation process. Ideally, a simple
clone of the repository should be enough for everything, but unfortunately
that isn't enough.

Despite being aware of what these plugins offer, I have avoided plugins such
as YouCompleteMe (https://valloric.github.io/YouCompleteMe/), and deoplete
(https://github.com/Shougo/deoplete.nvim) as their installation requires
a fair amount of work, or may not be possible if I don't have the required
permissions on the machine I'm on.

Resolve where dependencies cannot be met~

Powerline fonts provides a nice aesthetic improvement to the status line and
buffer line. However, they require an extra installation step, and I have not
been able to get it to work with Windows. It made sense to keep them optional,
which is why Powerline symbols are disabled by default and can be enabled per
device in |settings.vim|.

Intellisense autocompletion is a nice feature, which requires lua support.
For newer versions of Vim, |completor| is loaded for asycnhronous
autocompletion, which is very responsive. Without the prequisite features,
|neocomplete| is loaded instead, which offers synchronous autocomplete at
a small performance cost.

------------------------------------------------------------------------------
3.3 Mappings                                                     *qvim-mappings*

I have both remapped many keys as well as created new mappings. Whether I'm
adding new mappings in the future, or changing and deleting old ones, these
are some points I keep in mind to make my and anyone else's experience as
smooth as possible.

------------------------------------------------------------------------------
3.3.1 Defaults                                                   *qvim-defaults*

I try to respect Vim's default mappings as much as possible, with
commonly-known mappings have a greater importance over the lesser-known ones.
In other words, I have kept these common default mappings with their default
behaviour, even if more useful options exist. There are two main reasons for
this:

Maintaining Muscle Memory~

There are occasional moments where I am not working with my own personally
configured Vim. Either, I'm working with vanilla Vim/Vi, or far more likely,
I'm working in some other editor or IDE with basic Vim emulation. Going back
and forth between basic Vim and my own configuration can be occasionally
disorienting when the controls don't match up. For example, for a few months,
I used to swap |:| and |;| as such: >

        noremap ; :
        noremap : ;
>
At the time, I very often used |:| for commands, and rarely used |;| so
I thought it would be better to swap them since I would not longer need to
press <Shift> to start a command. Turns out that ergonomically this was
actually a pretty good. However, I found myself messing up whenever I was
using Vim keymappings in my other editors (Eclipse, Visual Studio and Atom at
the time). It wasn't just the one key change too, I had a fairly large number
of rebound keys. Eventually I decided to swap back and get use to Vim's
defaults.

Usability for Others~

For the few other people who actually use this configuration besides myself,
having sane defaults makes learning and using Vim much easier. Since the only
way to figure out what I've changed is by testing it out or searching through
my |vimrc|, changing everything would only serve to confuse and frustrate
others.

------------------------------------------------------------------------------
3.3.2 Redundancy                                               *qvim-redundancy*

At direct odds with my goal to maintain Vim's defaults, I also strive to make
use of Vim's redundant default key mappings. In my eyes, these keys would have
better utility doing something else, especially since they can be achieved by
other means. In determining which redundant mapping to override, I consider
the following questions. I will use the keys |j| and |+| and my decision to
remap out of them as an example of how these questions are applied.

Which mapping is more commonly used or known for this task?~
Some keys are fairly well-known for what they do. It may because they have
a good mneumonic or accomplish some common or useful task. With |j| and |+|
as examples:

        1. Both move the cursor 1 line down by default.
        2. Both can be prepended with a [count] to move that number of lines
           down.

However, |j| is well-known for accomplishing this task. If I were to remap |j|
to do some other completely unrelated task, someone who does not expect the
change may accidentally do some very unexpected things.

On the other hand, most people don't know what |+| does in normal mode, and
even those who do probably don't use it. If I were to remap |+|, most people
would not notice and so would not be disrupted.

Considering this alone, |+| becomes a good candidate to remap.

How does the ergonomics of this key relate to the frequency of this task?~
Typically, more frequent tasks should have higher priority for ergonomic
key mappings over infrequent tasks. |j| sits on the home row, making it easily
accessible, while |+| sits two rows above, and requires <Shift> as a modifier
key to press.

|j| is probably one of the most frequently used movement commands, while |+|
barely, if ever, gets used for movement. This further justifies the remapping
of |+| so it can be better used.

Which mapping has a better menumonic/semantic value for this task?~
To reduce memory load and ease learning, key mappings should have strong
semantic value, either with a good mneumonic or, less preferably, through
their spatial relation to other keys of similar purpose.

|j| isn't bound by any mneumonic but instead by its spatial relation to other
similar movements keys |h|, |k|, and |l|. This gives it some value to keep it
as it is.

|+| as a symbol doesn't really have any semantic relation to going lines down.
Typically |+| is viewed as the plus operator in mathematics, so I thought it
would be best to relate the symbol to some task that related to it. As
a result, I bound |+| to the same task as CTRL-A, which adds a [count] to
a number.

------------------------------------------------------------------------------
3.3.3 Editing Style                                         *qvim-editing-style*
Vim's commands are generally known for having two characteristics. They are
generally:

        1. Semantically-valued or mneumonically based
        2. Composed of sequentially-ordered keystrokes instead of using
           modifier keys


==============================================================================
4. Settings                                                       *settings.vim*

Upon installing this configuration, a file 'settings.vim' is created in your
'~/.vim' directory. It allows you to conveniently configure certain aspects of
Vim to your liking without needing to modify your '.vimrc' file. As it is not
tracked by git, you can different settings applied on different machines
without worrying about merge conflicts when you update from the repository. It
can be quickly accessed with the mapping:

        <Space>es

which will open the file in a new buffer. Any changes will be applied by
restarting Vim. If you have any feedback on new settings, or changes to
existing ones, feel free to post your ideas on Github here:

        https://github.com/EvanQuan/qvim/issues/new

------------------------------------------------------------------------------
vim:tw=78:ts=8:ft=help:noet:nospell:expandtab
